--------------------------------------------------------------
54 Q0 CACM-2940 1  24.27280205695603 BM25


Abstraction and Verification in Alphard: Definingand Specifying Iteration and Generators
abstraction and representation , ABSTRACT data TYPES , assertions , control specialization , CORRECTNESS , generators , invariants , iteration statements , modulardecomposition , program SPECIFICATIONS , programming LANGUAGES , programming methodology , PROOFS of CORRECTNESS , TYPES , verification Abstraction and Verification in Alphard : Definingand Specifying Iteration and Generators The Alphard `` form '' provides the programmer witha great deal of control over the implementation of ABSTRACT data TYPES In this paper the abstraction techniquesare extended from simple data representation and function definition to the iteration statement , themost important poin t of interaction between data and the control structure of the language itself Ameans of specializing Alphard 's loops to operate on ABSTRACT entities without explicit dependence on therepresentation of those entities is in troduced Results are obtained that for common special cases of these loops are essentially identical to thecorresponding constructs in other LANGUAGES 

CA770803 JB December 28, 1977  7:59 AM


--------------------------------------------------------------
54 Q0 CACM-2732 2  22.719253096877523 BM25


Guarded Commands, Nondeterminacy and Formal Derivation of Programs
DIJKSTRA , E programming LANGUAGES , sequencing primitives , programsemantics , programming language SEMANTICS , nondeterminacy , case-construction , repetition , termination , CORRECTNESS proof , derivation of programs , programming methodology 

CA750803 JB January 6, 1978  4:46 PM


--------------------------------------------------------------
54 Q0 CACM-2958 3  20.703610178042943 BM25


Abstract Data Types and the Development of Data Structures
The paper also contains a brief discussion of the problemsinvolved in constructing algebraic SPECIFICATIONS that are both consistent and complete ABSTRACT Data TYPES and the Development of Data Structures ABSTRACT data TYPES can play a significant rolein the development of software that is reliable , efficient , and flexible This paper presents and discussesthe application of an algebraic technique for the specification of ABSTRACT data TYPES ABSTRACT data type , CORRECTNESS proof , data type , data structure , specification , software specification Amongthe examples presented is a top-down development of a symbol table for a block structured language ; a discussionof the proof of its CORRECTNESS is given 

CA770605 JB December 29, 1977  1:17 AM


--------------------------------------------------------------
54 Q0 CACM-2295 4  20.099404693545317 BM25


Comment on the Composition of Semantics in Algol 68
Comment on the Composition of SEMANTICS in Algol 68 programming primitives , programming LANGUAGES , Algol , SEMANTICS , recursive composition , design of programming LANGUAGES , data structures 

CA720807 JB January 30, 1978  9:29 AM


--------------------------------------------------------------
54 Q0 CACM-2192 5  18.819861579579943 BM25


Another Recursion Induction Principle
It is shown to be useful for proving partial functions equivalentand thus applicable in PROOFS about interpreters for programming LANGUAGES recursion , induction , CORRECTNESS , PROOFS , compiler CORRECTNESS 

CA710507 JB February 3, 1978  2:27 PM


--------------------------------------------------------------
54 Q0 CACM-2326 6  18.768707788767575 BM25


Fix point Approach to the Theory of Computation 
Following the fix point theory of Scott , thesemantics of computer programs are defined in terms of the least fix points of recursive programs verification techniques , SEMANTICS of programminglanguages , least fix points , recursive programs , computational induction Thisallows not only the justification of all existing verification techniques , but also their extension to thehandling , in a uniform manner of various properties of computer programs , INCLUDING CORRECTNESS , termination , and equivalence 

CA720702 JB January 30, 1978  3:42 PM


--------------------------------------------------------------
54 Q0 CACM-3031 7  18.41431673862474 BM25


Abstract Data Types and Software Validation
Second , semi-automatic tools are described which can be used both to automatesuch PROOFS of CORRECTNESS and to derive an immediate implementation from the axioms ABSTRACT Data TYPES and Software Validation A data abstraction can be naturally specifiedusing algebraic axioms First , it is shown howthe use of algebraic axiomatizations can simplify the process of proving the CORRECTNESS of an implementationof an ABSTRACT data type ABSTRACT data type , CORRECTNESS proof , data type , data structure , specification 

CA781208 DH January 18, 1979  2:51 PM   


--------------------------------------------------------------
54 Q0 CACM-2470 8  18.12519012189846 BM25


Fen-An Axiomatic Basis for Program Semantics
A formal system is presented which abstractsthe notions of data item , function , and relation An appendix is included which presents indetail the formal system governing webs and fen , the abstractions used informally in the body of the paper Fen-An Axiomatic Basis for Program SEMANTICS It is argued that the system is more suitable than settheory ( or its derivatives ) for the concise and accurate description of program SEMANTICS The theory is applied to the proof of several elementary theorems concerning the semanticsof the assignment , conditional , and iterative statements SEMANTICS , formal systems , lambda-calculus , extensiblelanguages , data TYPES , modes , axioms , CORRECTNESS , formal language definition , formal description , data structures , description LANGUAGES , models of computation It is shownhow the system can be used to build composite data TYPES out of simper ones with the operations of rowing , structuring , and uniting It is also demonstrated that completely new primitive TYPES can be introducedinto LANGUAGES through the mechanism of singleton data TYPES 

CA730804 JB January 23, 1978  11:01 AM


--------------------------------------------------------------
54 Q0 CACM-2842 9  17.81130198634912 BM25


The Denotational Semantics of Programming Languages
The DENOTATIONAL SEMANTICS of Programming LANGUAGES This paper is a tutorial introduction to thetheory of programming language SEMANTICS developed by D SEMANTICS , programming language , applicative , imperative , environment , store , continuation , theory of computation , higher-order function , recursive definition , LOOP , GEDANKEN 

CA760802 JB January 4, 1978  10:33 AM


--------------------------------------------------------------
54 Q0 CACM-3105 10  16.749165978896666 BM25


A Language Extension for Expressing Constraints on Data Access
The approach can be used to extend any strongly-typed language , but is particularly suitable for extendinglanguages that support the notion of ABSTRACT data TYPES Programming LANGUAGES , access control , data TYPES , ABSTRACT data TYPES , type checking , capabilities Thispaper shows how to extend programming LANGUAGES to provide controlled sharing 

CA780502 DH February 26, 1979  3:19 PM


--------------------------------------------------------------
54 Q0 CACM-2411 11  15.826936447778348 BM25


Tree-Structured Programs
control structures , flowcharts , goto statements , inductive assertion , least fix points , optimization in compilers , program documentation , program flow graphs , programming language design , proof of programs , SEMANTICS of programming LANGUAGES , structured programming 

CA731115 JB January 19, 1978  4:19 PM


--------------------------------------------------------------
54 Q0 CACM-3103 12  14.537022117466988 BM25


Automatic Data Structure Selection: An Example and Overview
The use of several levels of abstraction hasproved to be very helpful in constructing and maintaining programs When programs are designed with abstractdata TYPES such as sets and lists , programmer time can be saved by automating the process of fillingin low-level implementation details In the past , programming systems have provided only a single generalpurpose implementation for an ABSTRACT type Thus the programs produced using ABSTRACT TYPES werethen inefficient in space or time In this paper a system for automatically choosing efficient implementationsfor ABSTRACT TYPES from a library of implementations is discussed ABSTRACT data TYPES , automatic programming , datastructures , optimizing compilers , sets , lists 

CA780504 DH February 26, 1979  1:51 PM


--------------------------------------------------------------
54 Q0 CACM-2148 13  14.046454411260179 BM25


The Composition of Semantics in Algol 68
The Composition of SEMANTICS in Algol 68 programming primitives , programming LANGUAGES , Algol , SEMANTICS , recursive composition , design of programming LANGUAGES , data structures 

CA711101 JB February 2, 1978  11:49 AM


--------------------------------------------------------------
54 Q0 CACM-2264 14  14.046399553700539 BM25


Derived Semantics for Some Programming Language Constructs
Derived SEMANTICS for Some Programming Language Constructs lambda calculus , formal description , programcorrectness , programming LANGUAGES , SEMANTICS CORRECTNESS of the implementation involves checking that the definitions derivedin the step above are an acceptable formalization of the informal description given in the first step 

CA721105 JB January 27, 1978  2:19 PM


--------------------------------------------------------------
54 Q0 CACM-2943 15  13.952981182086019 BM25


Lucid, a Nonprocedural Language with Iteration
Lucid is a formal system in which programscan be written and PROOFS of programs carried out The PROOFS are particularly easy to follow and straightforwardto produce because the statements in a Lucid program are simply axioms from which the proofproceeds by ( almost ) conventional logical reasoning , with the help of a few axioms and rules of inferencefor the special Lucid functions program proving , formal systems , SEMANTICS , iteration , structured programming 

CA770709 JB December 28, 1977  8:30 AM


--------------------------------------------------------------
54 Q0 CACM-2227 16  13.540158777011236 BM25


Proof of a Program: FIND
HOARE , C PROOFS of programs , programming methodology , programdocumentation , program CORRECTNESS , theory of programming A proof is given of the CORRECTNESS of thealgorithm `` Find 

CA710107 JB February 8, 1978  10:40 AM


--------------------------------------------------------------
54 Q0 CACM-0065 17  12.530651937952037 BM25


ALGOL Sub-Committee Report - Extensions
DIJKSTRA , E 

CA590904 JB March 22, 1978  4:49 PM


--------------------------------------------------------------
54 Q0 CACM-3073 18  12.440462004905994 BM25


Communicating Sequential Processes
HOARE , C When combined with a development of DIJKSTRA 's guarded command , these concepts are surprisingly versatile Programming , programming LANGUAGES , programming primitives , program structures , parallel programming , concurrency , input , output , guarded commands , nondeterminacy , coroutines , procedures , multiple entries , multiple exits , classes , data representations , recursion , conditional critical regions , monitors , iterative arrays 

CA780805 DH February 7, 1979  10:07 AM


--------------------------------------------------------------
54 Q0 CACM-1747 19  12.21047108878328 BM25


Three Criteria for Designing Computing Systems to Facilitate Debugging
To define the scope of the criteria , the notion of an abstractmachine of a programming language and the notion of a virtual computer are explained computer design , computer design criteria , computersystems , computer systems design , input equipment , input equipment design , operating systems , operatingsystems design , multiprogramming , multiprogrammed systems , multiprogrammed system design , virtual computers , programming LANGUAGES , programming language design , program SEMANTICS , programming language SEMANTICS , determinism , reproducibility , repeatability , deterministic computers , protection , memory protection , information security , information privacy , computing reliability , debugging , program debugging , program testing , parallel processing , parallel programming , multiprocessing 

CA680509 JB February 23, 1978  9:06 AM


--------------------------------------------------------------
54 Q0 CACM-2256 20  12.151320857091275 BM25


Further Comments on Dijkstra's Concurrent Programming Control Problem
Further Comments on DIJKSTRA 's Concurrent Programming Control Problem 

CA721113 JB January 27, 1978  1:24 PM


--------------------------------------------------------------
54 Q0 CACM-2178 21  12.149155638246622 BM25


A Language Extension for Graph Processing and Its Formal Semantics
A Language Extension for Graph Processing and Its Formal SEMANTICS Commonly , the definition of a language involves definition of the syntactic elements and explanationof the meaning to be assigned them ( the SEMANTICS ) The definition of Graspe here is solely interms of its SEMANTICS ; that is , the data structures and operations are defined precisely but without assignmentof a particular syntactic representation The advantages and disadvantages of the definition of a language in terms of its SEMANTICS are discussed graph processing , programming language , formal SEMANTICS , directed graph , Lisp , network , data structure , flowchart , syntax , language definition 

CA710704 JB February 3, 1978  9:24 AM


--------------------------------------------------------------
54 Q0 CACM-2155 22  12.097936262182436 BM25


Toward an Understanding of Data Structures
This paper presents a notation and formalismfor describing the SEMANTICS of data structures In addition , an implementation facility is described which couldbe part of a programming language , which allows a programmer who has expressed the SEMANTICS of an algorithmin terms of the graphs to then specify the implementation of some of his data structures in order to gain efficiency 

CA711001 JB February 2, 1978  1:35 PM


--------------------------------------------------------------
54 Q0 CACM-3133 23  11.954655519220523 BM25


Logic and Semantic Networks
Onthe other hand , by regarding semantic networks as an ABSTRACT data structure for the representation of clauses , we provide atheorem-prover with a potentially useful indexing scheme and path-followingstrategy for guiding the search for a proof By virtue of its relationship with logic , the extendedsemantic network is provided with a precise SEMANTICS , inference rules , and a procedural interpretation 

CA790304 DH April 12, 1979  3:53 PM


--------------------------------------------------------------
54 Q0 CACM-0949 24  11.853576896635923 BM25


Integer and Signed Constants in ALGOL
A few remarks are given on the relations betweensyntax and SEMANTICS in the programming LANGUAGES 

CA641222 JB March 9, 1978  2:35 PM


--------------------------------------------------------------
54 Q0 CACM-2931 25  11.640478777971799 BM25


Logic and Programming Languages
logic , programming LANGUAGES , automata , denotationalsemantics , a-calculus models , computability , partial functions , approximation , function spaces The experience of many independent workers with the method of data TYPES as lattices ( or partialorderings ) under an information content ordering , and with their continuous mappings , has demonstrated theflexibility of this approach in providing definitions and PROOFS , which are clean and without undue dependenceon implementations These levelscan be made mathematically exact if we can find the right abstractions to represent the necessary structures Nevertheless much remains to be done in showing how ABSTRACT conceptualizationscan ( or can not ) be actualized before we can say we have a unified theory Logic and Programming LANGUAGES Programming LANGUAGES offer an obvious opportunity as their syntactic formalizationis well advanced ; however , the semantical theory can hardly be said to be complete 

CA770902 JB December 28, 1977  6:49 AM


--------------------------------------------------------------
54 Q0 CACM-3188 26  11.332798616475088 BM25


   Semiotics and Programming Languages
I should insertat this point that language has many aspects and that pragmatics , SEMANTICS andsyntactics do not necessary cover all of them Semiotics and Programming LANGUAGES 

CA660319 ES March 17, 1982 10:10 AM


--------------------------------------------------------------
54 Q0 CACM-2941 27  11.313013370161299 BM25


Early Experience with Mesa
The specific topics addressed are : module structure and its use in defining abstractions , data-structuringfacilities in Mesa , an equivalence algorithm for TYPES and type coercions , the benefits of the type systemand why it is breached occasionally , and the difficulty of making the treatment of variant records safe programming LANGUAGES , TYPES , modules , data structures , systems programming The experiences of Mesa 's first users-primarilyits implementers-are discussed , and some implications for Mesa and similar programming LANGUAGES are suggested 

CA770802 JB December 28, 1977  8:07 AM


--------------------------------------------------------------
54 Q0 CACM-1471 28  11.210274291471844 BM25


Programming Semantics for Multiprogrammed computations
Programming SEMANTICS for Multiprogrammed computations The SEMANTICS are defined for a number of meta-instructionswhich perform operation essential to the writing of programs in multiprogrammed computersystems 

CA660301 JB March 3, 1978  2:25 PM


--------------------------------------------------------------
54 Q0 CACM-1902 29  11.116815530877748 BM25


An Automatic Grading Scheme for Simple Programming Exercises
A discussion is given of alterations that weremade to a typical UNIVERSITY operating system to record the results of programming exercises in threedifferent LANGUAGES , INCLUDING assembly language 

CA690507 JB February 17, 1978  3:35 PM


--------------------------------------------------------------
54 Q0 CACM-3185 30  10.911194047189221 BM25


   The Humble Programmer
DIJKSTRA , E We shall do a much better programming job , provided that we approach thetask with a full appreciation if its tremendous difficulty , provided that we stick to modest and elegant programming LANGUAGES , provided that we respectthe intrinsic limitations of the human mind and approach the task as VeryHumble Programmers 

CA721010 ES March 18, 1982 10:00 AM


--------------------------------------------------------------
54 Q0 CACM-1213 31  10.878607531644972 BM25


Dynamic Format Specifications
Dynamic Format SPECIFICATIONS These format TYPES give the FORTRAN programmer control of input/outputspecifications at execution time 

CA650811 JB March 6, 1978  8:07 PM


--------------------------------------------------------------
54 Q0 CACM-2112 32  10.864270681884753 BM25


Translation Equations
A formal procedure is given for deriving froma set of translation equations the SPECIFICATIONS for a pushdown translator Input limited transduction expressions , or translation equations , are used to describe the syntax and left-context sensitive SEMANTICS for context-free LANGUAGES automata , Turing machines , regular expression , transductionexpression , context-free LANGUAGES , translation , recognizers , parsing , meta-compilers , pushdown transducer , syntaxdirected compilers , finite state automata 

CA700203 JB February 14, 1978  10:49 AM


--------------------------------------------------------------
54 Q0 CACM-2314 33  10.56782016824047 BM25


Requirements for Advanced Programming Systems for List Processing
list processing , programming LANGUAGES , design ofprogramming LANGUAGES , interactive systems , control structures , data structures , programming primitives , SEMANTICS , advanced programming systems Implementation of a generalized environmentstructure model specified would allow programming of various control regimes INCLUDING multiprocesses , coroutines and backtracking 

CA720714 JB January 30, 1978  1:30 PM


--------------------------------------------------------------
54 Q0 CACM-2703 34  10.485975974432955 BM25


The Intrinsically Exponential Complexity ofthe Circularity Problem for Attribute Grammars
Attribute grammars are an extension of context-freegrammars devised by Knuth as a mechanism for INCLUDING the SEMANTICS of a context-free languagewith the syntax of the language The circularity problem for a grammar is to determine whether the semanticsfor all possible sentences ( programs ) in fact will be well defined attribute grammars , circularity problem , context-freegrammars , computational complexity , exponential time , SEMANTICS 

CA751204 JB January 5, 1978 4:38 PM


--------------------------------------------------------------
54 Q0 CACM-3104 35  10.398275104554621 BM25


Test Data as an Aid in Proving Program Correctness
PROOFS of program CORRECTNESS tend to be longand tedious , whereas testing , though useful in detecting errors , usually does not guarantee CORRECTNESS Test Data as an Aid in Proving Program CORRECTNESS This paper introduces a techniques whereby test data can be used in proving program CORRECTNESS In addition to simplifying the process of proving CORRECTNESS , this method simplifies the process of providingaccurate specification for a program 

CA780503 DH February 26, 1979  2:10 PM


--------------------------------------------------------------
54 Q0 CACM-0307 36  10.213737198159528 BM25


FIND (Algorithm 65)
HOARE , C 

CA610710 JB March 16, 1978  10:20 PM


--------------------------------------------------------------
54 Q0 CACM-0308 37  10.213737198159528 BM25


QUICKSORT (Algorithm 64)
HOARE , C 

CA610709 JB March 16, 1978  10:21 PM


--------------------------------------------------------------
54 Q0 CACM-0309 38  10.213737198159528 BM25


PARTITION (Algorithm 63)
HOARE , C 

CA610708 JB March 16, 1978  10:22 PM


--------------------------------------------------------------
54 Q0 CACM-3077 39  10.036477662660358 BM25


Can Programming Be Liberated from the von NeumannStyle?  A Functional Style and Its Algebra of Programs
Inherent defects at the most basic level cause them to be bothfat and weak : their primitive word-at-a-time style of programming inherited from their common ancestor-thevon Neumann computer , their close coupling off SEMANTICS to state transitions , their division of programminginto a world of expressions and a world of statements , their inability to effectively use powerfulcombining forms for building new programs from existing ones , and their lack of useful mathematicalproperties for reasoning about programs Unlike von Neumann LANGUAGES , these systems have SEMANTICS loosely coupled to states-only onestate transition occurs per major computation Functional programming , algebra of programs , combiningforms , functional forms , programming LANGUAGES , von Neumann computers , von Neumann LANGUAGES , models ofcomputing systems , applicative computing systems , applicative state transition systems , program transformation , program CORRECTNESS , program termination , metacomposition Conventional programming LANGUAGES are growingever more enormous , but not stronger Combining forms canuse high level programs to build still higher levelones in a style not possible in conventional LANGUAGES 

CA780801 DH February 7, 1979  3:13 PM


--------------------------------------------------------------
54 Q0 CACM-3198 40  9.954069946345733 BM25


   Microprogramming, Emulators and Programming Languages
In the areas of language investigation we have concentrated first on formalizing syntax and then on SEMANTICS Microprogramming , Emulators and Programming LANGUAGES 

CA660318 ES March 17, 1982 10:10 AM


--------------------------------------------------------------
54 Q0 CACM-2265 41  9.911447419396461 BM25


A Model for Type Checking
This paper attempts to isolate the notion of type checking and presents a partialsolution to the type checking problem based on the notions of abstraction and application of functions type checking , TYPES , Lambda calculus , models forprogramming LANGUAGES , syntax , SEMANTICS , compiler writing , language implementation , formal definition The determinationof the type-wise CORRECTNESS or incorrectness of the program is resolved by reducing its correspondingLambda calculus expression to one of two normal forms , the constant `` correct '' for a type-wise correctprogram or the constant `` error '' Most current programming LANGUAGES treat computationover different classes of objects ( e 

CA721104 JB January 27, 1978  2:30 PM


--------------------------------------------------------------
54 Q0 CACM-2796 42  9.902053173271092 BM25


Monitors: An Operating System Structuring Concept (Corrigendum)
HOARE , C 

CA750203 JB January 12, 1978  8:45 AM


--------------------------------------------------------------
54 Q0 CACM-2865 43  9.896933271093344 BM25


Verifying Properties of Parallel Programs: An Axiomatic Approach
HOARE has given a set of axioms for partial CORRECTNESS , but they are not strong enough in most cases structured multiprogramming CORRECTNESS PROOFS , programverification , concurrent processes , synchronization , mutual exclusion , deadlock This paper defines a more powerful deductive system whichis in some sense complete for partial CORRECTNESS The information in a partialcorrectness proof can be used to prove such properties as mutual exclusion , freedom from deadlock , and program termination 

CA760506 JB January 4, 1978  3:23 PM


--------------------------------------------------------------
54 Q0 CACM-1496 44  9.889312279047891 BM25


A Formal Semantics for Computer Languagesand its Application In a Compiler-Compiler
A Formal SEMANTICS for Computer Languagesand its Application In a Compiler-Compiler A semantic meta-language has been developedfor representing the meanings of statements in a large class of computer LANGUAGES 

CA660101 JB March 3, 1978  4:31 PM


--------------------------------------------------------------
54 Q0 CACM-2651 45  9.805263248343856 BM25


The Treatment of Data Types in EL1
The Treatment of Data TYPES in EL1 In constructing a general purpose programminglanguage , a key issue is providing a sufficient set of data TYPES and associated operations in a mannerthat permits both natural problem-oriented notation and efficient implementation The resultingtreatment of data TYPES includes provision for programmer-defined data TYPES data TYPES and genericroutines , programmer control over type conversion , and very flexible data type behavior , in a context thatallows efficient compiled code and compact data representation data TYPES , modes , mode unions , type conversion , coercion , generic functions , extensible LANGUAGES , data type definition , data description language , compilation 

CA740502 JB January 17, 1978  4:32 PM


--------------------------------------------------------------
54 Q0 CACM-1323 46  9.692809090989607 BM25


A Correspondence Between ALGOL 60 and Church's Lambda-Notation: Part I*
First a model for computer LANGUAGES and compute behavioris described , based on the notions of functional application and functional abstraction , but also havinganalogues for imperative language features Then this model is used as an `` ABSTRACT object language '' into which ALGOL 60 is mapped an `` ABSTRACT compiler '' into the `` ABSTRACT objct language `` This is itself presented in a `` purelyfunctional '' notation , that is one using only application and abstraction This paper describes how some of the semanticsof ALGOL 60 can be formalized by establishing a correspondence between expressions of ALGOL 60 and expressionsin a modified form of Church 's L-notation 

CA650201 JB March 7, 1978  11:26 PM


--------------------------------------------------------------
54 Q0 CACM-2972 47  9.657196927580458 BM25


Proof Techniques for Hierarchically Structured Programs
A method for describing and structuring programsthat simplifies PROOFS of their CORRECTNESS is presented The PROOFS , like the programs , are structured by levels Although only manual proofsare described in the paper , the method is also applicable to semi-automatic and automatic PROOFS The method formally represents a programin terms of levels of abstraction , each level of which can be described by a self-contained nonproceduralspecification hierarchical structure , program verification , structuredprogramming , formal specification , abstraction , and programming methodology 

CA770410 JB December 29, 1977  4:53 AM


--------------------------------------------------------------
54 Q0 CACM-3039 48  9.479092826698349 BM25


On-the-Fly Garbage Collection: An Exercise in Cooperation
DIJKSTRA , E Multiprocessing , fine-grained interleaving , cooperationbetween sequential processes with minimized mutual exclusion , program CORRECTNESS for multiprogrammingtasks , garbage collection 

CA781112 DH January 22, 1979  3:24 PM


--------------------------------------------------------------
54 Q0 CACM-2705 49  9.356019547264951 BM25


Programming Languages, Natural Languages, and Mathematics
The development of natural LANGUAGES towardflexion less , word-order based language TYPES speaks for programming language design based on general , ABSTRACT constructs Programming LANGUAGES , Natural LANGUAGES , and Mathematics Some social aspects of programming are illuminatedthrough analogies with similar aspects of mathematics and natural LANGUAGES By analogy with incidents of the history of artificial , auxiliary LANGUAGES itis suggested that Fortran and Cobol will remain dominant for a long time to come analogies related to social aspects , pure and appliedmathematics , language quality , language development , artificial auxiliary LANGUAGES , literature , style , descriptive and prescriptive attitudes 

CA751202 JB January 6, 1978  8:30 AM


--------------------------------------------------------------
54 Q0 CACM-3186 50  9.353664558150705 BM25


   GO TO Statement Considerd Harmful
DIJKSTRA , E 

CA680303 ES March 17, 1982 10:10 AM


--------------------------------------------------------------
54 Q0 CACM-2886 51  8.993895588232318 BM25


Semantic Evaluation from Left to Right
Acondition for an attribute grammar is given which assures that the SEMANTICS of any program can be evaluatedin a single pass over the derivation tree , and an algorithm is discussed which decides how manypasses from left to right are in general necessary , given the attribute grammar attribute grammars , SEMANTICS of programming LANGUAGES , semantic attributes , left-to-right parsing , multipass compilers , semantic evaluation , semantic conditions This paper describes attribute grammars and theiruse for the definition of programming LANGUAGES and compilers ; a formal definition of attribute grammarsand a discussion of some of its important aspects are included 

CA760201 JB January 5, 1978  9:54 AM


--------------------------------------------------------------
54 Q0 CACM-1834 52  8.94189800062779 BM25


An Axiomatic Basis for Computer Programming
HOARE , C This involves the elucidationof sets of axioms and rules of inference which can be used in PROOFS of the properties of computerprograms axiomatic method , theory of programming , PROOFS ofprograms , formal language definition , programming language design , machine-independent programming , program documentation 

CA691012 JB February 15, 1978  1:48 PM


--------------------------------------------------------------
54 Q0 CACM-2558 53  8.847765579402774 BM25


Protection in Programming Languages
protection , TYPES , environments , trademarks , seals , access keys , access control authentication , secrecy Protection in Programming LANGUAGES 

CA730103JB January 24, 1978  4:45 PM


--------------------------------------------------------------
54 Q0 CACM-1835 54  8.539027128134228 BM25


The IITRAN Programming Language
IITRAN is a procedure-oriented languagewith a one-level block structure and a variety of data TYPES LANGUAGES programming LANGUAGES , student programmingsystems , language design , high school programs , college courses 

CA691011 JB February 15, 1978  1:54 PM


--------------------------------------------------------------
54 Q0 CACM-2710 55  8.21801946248218 BM25


Specifying Queries as Relational Expressions:The SQUARE Data Sublanguage
A syntax is given , and suggestions are made for alternative syntaxes , INCLUDING a syntax based on English key words forusers with limited mathematical background SQUAREis based on the relational model of data , and is shown to be relationally complete ; however , it avoidsthe quantifiers and bound variables required by LANGUAGES based on the relational calculus database , data sublanguages , relations , query LANGUAGES , casual user , relational data model , tabular data , interactive problem solving , nonprocedurallanguages , relational completeness 

CA751102 JB January 6, 1978  10:04 AM


--------------------------------------------------------------
54 Q0 CACM-0529 56  8.18453855774915 BM25


Regression and Coded Patterns in Data Editing


CA620732 JB March 17, 1978  7:42 PM


--------------------------------------------------------------
54 Q0 CACM-2956 57  8.156987424970874 BM25


Some Ideas on Data Types in High-Level Languages
Some Ideas on Data TYPES in High-Level LANGUAGES Amongthese are the need for a notation for iterating over the elements of any finite set ( instead of themore narrow for i : = 1 to n notation ) , the use of the domain of an array as a data type , the need fora simple notation for allowing TYPES of parameters to be themselves parameters ( but in a restrictive fashion ) , and resulting problems with conversion of values from one type to another data TYPES , generic procedures , programming LANGUAGES 

CA770607 JB December 28, 1977  1:27 PM


--------------------------------------------------------------
54 Q0 CACM-1781 58  8.067796988461069 BM25


Translator Writing systems
compiler , compiler-compiler , translator , translatorwriting systems , metacompiler , syntax , SEMANTICS , syntax-directed , meta-assembler , macroprocessor , parser , syntactic analysis , generator A critical review of recent efforts to automatethe writing of translators of programming LANGUAGES is presented 

CA680201 JB February 23, 1978  2:02 PM


--------------------------------------------------------------
54 Q0 CACM-2939 59  7.991102238958504 BM25


Abstraction Mechanisms in CLU
Abstraction Mechanisms in CLU CLU is a new programming language designed to supportthe use of abstractions in program construction Work in programming methodology has led to the realizationthat three kinds of abstractions-procedural , control , and especially data abstractions-are usefulin the programming process Of these , only the procedural abstraction is supported well by conventionallanguages , through the procedure or subroutine CLU provides , in addition to procedures , novel linguisticmechanisms that support the use of data and control abstractions This paper provides an in troductionto the abstraction mechanisms in CLU By means of programming examples , the utility of the threekinds of abstractions in program construction is illustrated , and it is shown how CLU programs maybe written to use and implement abstractions programming LANGUAGES , data TYPES , data abstractions , control abstractions , programming methodology , separate compilation 

CA770804 JB December 28, 1977  7:49 AM


--------------------------------------------------------------
54 Q0 CACM-1457 60  7.972108914704413 BM25


Data Manipulation and Programming Problemsin Automatic Information Retrieval
Automatic information retrieval programs requirethe manipulation of a variety of different data structures , INCLUDING linear text , sparse matrices , and tree or list structures A variety of data representations which have been used to describestructured information are then examined , and the characteristics of various processing LANGUAGES areoutlined in the light of the procedures requiring implementation Advantages of these programming languagesfor the retrieval application are examined , and suggestions are made for the design of programmingfacilities to aid in information retrieval 

CA660315 JB March 3, 1978  11:35 AM


--------------------------------------------------------------
54 Q0 CACM-0689 61  7.849734947008397 BM25


Report of a Visit to Discuss Common ProgrammingLanguages in Czechoslovakia and Poland, 1963
Report of a Visit to Discuss Common ProgrammingLanguages in Czechoslovakia and Poland , 1963 

CA631103 JB March 13, 1978  3:51 PM


--------------------------------------------------------------
54 Q0 CACM-2254 62  7.800623214694455 BM25


Dynamic Partitioning for Array Languages
The description presented in this paper is implemented in a new array language , OL/2 , currentlyunder development at the UNIVERSITY of Illinois Various modes of partitioningare defined for different TYPES of arrays , so that subarrays may vary over the original array ina nearly arbitrary manner Dynamic Partitioning for Array LANGUAGES These definitions are motivated with several realistic examples to illustratethe value of partitioning for array LANGUAGES These are described in sufficient detail to be of value in the design of other array LANGUAGES 

CA721201 JB January 27, 1978  1:20 PM


--------------------------------------------------------------
54 Q0 CACM-1098 63  7.713567805012434 BM25


A Comparison of List-Processing Computer Languages(Including a Detailed Comparison of COMIT, IPL-V, LISP 1.5, and SLIP)
A Comparison of List-Processing Computer LANGUAGES ( INCLUDING a Detailed Comparison of COMIT , IPL-V , LISP 1 Principal differences between thefour LANGUAGES under consideration are detailed : representations of data , both by the programmer and withinthe machine ; methods for storage allocation ; programming formalisms and special processes available , INCLUDING arithmetic facilities ; and usability in terms of availability , documentation , learning aidsand debugging facilities 5 and SLIP - four well-known computer programming LANGUAGES which , among them , exhibit all theprincipal characteristics of existing list-processing LANGUAGES Important common features of list-processinglanguages are reviewed : forms of data structures which are manipulated , necessity for dynamic allocationof storage , use of pushdown stores , and use of recursive operations A rough comparison shows that all the LANGUAGES discussed have approximatelythe same speed Finally , the authors give some heuristics to aid in the selection of one of theselanguages for use in particular problem applications , concluding that no one of the LANGUAGES considered isdistinctly superior in all possible list-processing applications 

CA640410 JB March 10, 1978  1:37 AM


--------------------------------------------------------------
54 Q0 CACM-2895 64  7.633104994911603 BM25


A Language for Formal Problem Specification
The SPECIFICATIONS are constrain ts on the order in whichevents of a computation can occur The language is used to write SPECIFICATIONS of the readers/writersproblem and the writer priority of the second readers/writers problem formal SPECIFICATIONS , program CORRECTNESS , parallelprocessing , synchronization , readers/writers problem 

CA771205 DMM December 22, 1977  12:44 PM


--------------------------------------------------------------
54 Q0 CACM-0990 65  7.594849965426427 BM25


Constraint-Type Statements in Programming Languages
A proposal is made for INCLUDING in a programminglanguage statements which imply relations between variables but which are not explicit assignmentstatements Constraint-Type Statements in Programming LANGUAGES 

CA641012 JB March 9, 1978  4:42 PM


--------------------------------------------------------------
54 Q0 CACM-2906 66  7.460894209500761 BM25


A Very High Level Programming Language for Data Processing Applications
In recent years , very high-level LANGUAGES have been increasingly explored as a solution to thisproblem This results in three different sublanguages or components : one for defining the businessforms , one for describing the business organization , and one for writing calculations 

CA771110 JB December 27, 1977  7:06 AM


--------------------------------------------------------------
54 Q0 CACM-3014 67  7.417909407445865 BM25


Is "Sometime" Sometimes Better than "Always"? (IntermittentAssertions in Proving Program Correctness)
The intermittent-assertion methodis presented with a number of examples of CORRECTNESS and termination PROOFS Some of these PROOFS are markedlysimpler than their conventional counterparts Is `` Sometime '' Sometimes Better than `` Always '' ? ( IntermittentAssertions in Proving Program CORRECTNESS ) This paper explores a technique for proving thecorrectness and termination of programs simultaneously On the other hand , it is shown that a proof of correctnessor termination by any of the conventional techniques can be rephrased directly as a proof usingintermittent assertions Finally , it is shown how the intermittent-assertion method can be appliedto prove the validity of program transformations and the CORRECTNESS of continuously operating programs intermittent assertions , CORRECTNESS of programs , termination of programs , program verification , program transformation , continuously operating programs 

CA780209 JB March 28, 1978  2:04 PM


--------------------------------------------------------------
54 Q0 CACM-0822 68  7.416645911933274 BM25


Real-Time Programming Specifications
Real-Time Programming SPECIFICATIONS Problems in the implementation of large real-timeapplications are treated , and suggested guidelines for both program and file SPECIFICATIONS are developed 

CA630702 JB March 14, 1978  8:50 AM


--------------------------------------------------------------
54 Q0 CACM-2718 69  7.329312848784123 BM25


A Preliminary System for the Design of DBTG Data Structures
An operational computer program is described which utilizers the functional approach to design datastructures conforming to the Data Base Task Group SPECIFICATIONS network model of databases , Data Base Task Group , databasedesign , data structure , automatic programming , translation , nonprocedural LANGUAGES 

CA751001 JB January 6, 1978  2:02 PM


--------------------------------------------------------------
54 Q0 CACM-1358 70  7.241152275376652 BM25


Syntax Macros and Extended Translation
A translation approach is described which allowsone to extended the syntax and SEMANTICS of a given high-level base language by the use of a newformalism called a syntax-macro Two TYPES of macros are discussed , and examples are given of their use 

CA661102 JB March 2, 1978  3:46 PM


--------------------------------------------------------------
54 Q0 CACM-2896 71  7.019220327244026 BM25


An Exercise in Proving Parallel Programs Correct
A parallel program , DIJKSTRA 's on-the-fly garbagecollector , is proved correct using a proof method developed by Owicki garbage collection , multiprocessing , programcorrectness for multiprocessing tasks 

CA771204 JB February 1, 1980  3:37 AM 


--------------------------------------------------------------
54 Q0 CACM-2957 72  7.003700386008364 BM25


Database Abstractions: Aggregation
Database Abstractions : Aggregation Aggregation is in troduced as an abstractionwhich is important in conceptualizing the real world A new data type , called aggregation , is developed which , undercertain criteria of `` well-definedness , '' specifies aggregation abstractions It issuggested that aggregate TYPES , and other TYPES which support real-world abstractions without in troducingimplementation detail , should be incorporated into programming LANGUAGES data abstraction , relational database , data type , aggregation , database design , data structure , knowledge representation , data definition language 

CA770606 JB December 29, 1977  12:33 AM


--------------------------------------------------------------
54 Q0 CACM-2945 73  6.927833072650719 BM25


Certification of Programs for Secure Information Flow
Appropriate SEMANTICS are presented andproved correct 

CA770707 JB December 28, 1977  8:48 AM


--------------------------------------------------------------
54 Q0 CACM-0628 74  6.906794668745773 BM25


On a Floating-Point Number RepresentationFor Use with Algorithmic Languages
On a Floating-Point Number RepresentationFor Use with Algorithmic LANGUAGES 

CA620304 JB March 20, 1978  3:09 PM


--------------------------------------------------------------
54 Q0 CACM-2616 75  6.720849042269977 BM25


On the Conversion of Programs to Decision Tables: Method and Objectives
decision tables , program optimization , debugging , SEMANTICS , theory of programming , systems analysis 

CA740808 JB January 17, 1978  9:43 AM


--------------------------------------------------------------
54 Q0 CACM-2851 76  6.689142640191463 BM25


Formal Verification of Parallel Programs
Examples are presented in which the induction principle is used to demonstrate PROOFS of mutual exclusion Two formal models for parallel computationare presented : an ABSTRACT conceptual model and a parallel-program model Through the use of `` place variables , '' it is observed that certaincorrectness conditions can be expressed without enumeration of the set of all possible control states CORRECTNESS of certain forms of implementation is also discussed parallel program , CORRECTNESS , verification , assertions , deadlock , mutual exclusion , Petrinet 

CA760702 JB January 4, 1978  1:20 PM


--------------------------------------------------------------
54 Q0 CACM-1421 77  6.5603154130886425 BM25


A Contribution to the Development of ALGOL
HOARE , C Part III describes a set of proposed standard proceduresto be used with the language , INCLUDING facilities for input/output 

CA660601 JB March 3, 1978  9:07 AM


--------------------------------------------------------------
54 Q0 CACM-2733 78  6.551498636934873 BM25


Deterministic Parsing of Ambiguous Grammars
It is shown how efficient LR and LL parsers can be constructed directly fromcertain classes of these SPECIFICATIONS Methods of describing the syntax of programminglanguages in ways that are more flexible and natural than conventional BNF descriptions are considered 

CA750802 JB January 9, 1978  9:28 AM


--------------------------------------------------------------
54 Q0 CACM-2342 79  6.522802785747192 BM25


Interference Between Communicating Parallel Processes
Various kinds of interference between communicatingparallel processes have been examined by DIJKSTRA , Knuth , and others Solutions have been givenfor the mutual exclusion problem and associated subproblems , in the form of parallel programs , and informalproofs of CORRECTNESS have been given for these solutions A mechanical proof procedure is shown , which will either verify ( provethe CORRECTNESS of ) or discredit ( prove the incorrectness of ) an attempted solution , with respectto any of the interference properties 

CA720603 JB January 31, 1978  8:44 AM


--------------------------------------------------------------
54 Q0 CACM-1678 80  6.483258687036843 BM25


Automata, Formal Languages, Abstract Switching,and Computability in a Ph. Computer Science Program
Automata , Formal LANGUAGES , ABSTRACT Switching , and Computability in a Ph A number of courses are listed in the areadescribe as automata , formal LANGUAGES , ABSTRACT switching , and computability , that might be availableto a Ph computerscience program , automata , formal LANGUAGES , switching theory , theory of computability 

CA681101 JB February 21, 1978  3:16 PM


--------------------------------------------------------------
54 Q0 CACM-2814 81  6.431515059213905 BM25


Roster of Programming Languages for 1974-75 
Roster of Programming LANGUAGES for 1974-75 

CA761201 JB January 3, 1978  2:38 PM


--------------------------------------------------------------
54 Q0 CACM-1339 82  6.423159874282758 BM25


A Contribution to the Development of ALGOL
HOARE , C 

CA661210 JB March 30, 1978  9:13 AM


--------------------------------------------------------------
54 Q0 CACM-2021 83  6.356535594936343 BM25


A Comment on Axiomatic Approaches to Programming
axiomatic method , PROOFS of programs , homomorphic structure in programming 

CA700716 JB February 10, 1978  4:15 PM


--------------------------------------------------------------
54 Q0 CACM-0920 84  6.334125481170352 BM25


Toward Better Documentation of Programming Languages
Toward Better Documentation of Programming LANGUAGES 

CA630301 JB March 14, 1978  1:51 PM


--------------------------------------------------------------
54 Q0 CACM-2578 85  6.234582587495439 BM25


Self-stabilizing Systems in Spite of Distributed Control
DIJKSTRA , E 

CA741106 JB January 16,1978  10:18 AM


--------------------------------------------------------------
54 Q0 CACM-2661 86  6.152713412703617 BM25


Ideal Teaching Machines-A Solution to the Pedagogic Language Problem
education , programming LANGUAGES , simulators 

CA740409 JB February 1, 1978  10:38 AM


--------------------------------------------------------------
54 Q0 CACM-2316 87  6.039833577657689 BM25


Programming Languages: History and Future
Programming LANGUAGES : History and Future This paper discusses both the history and futureof programming LANGUAGES ( = higher level LANGUAGES ) A key part of the paper is a tree showing the chronological development of LANGUAGES and theirinterrelationships Reasons for the proliferation of LANGUAGES are given The major LANGUAGES are listedwith the reasons for their importance Key concepts other than specific LANGUAGES are discussed programming LANGUAGES , higher level LANGUAGES , LANGUAGES , history , future directions , language interrelationships , programming language tree , programminglanguage history , programming language future 

CA720712 JB January 30, 1978  1:38 PM


--------------------------------------------------------------
54 Q0 CACM-2406 88  5.955599574771536 BM25


A Data Definition and Mapping Language
Most data definition LANGUAGES concentrate on the declarationof logical data structures with little concern for how these structures are physically realizedon a computer system However , the need for data definition LANGUAGES which describe both the logicaland physical aspects of data is increasingly apparent Such LANGUAGES will be a key systems , as wellas in advanced data management systems and distributed data bases Applications of these '' generalized '' data definition LANGUAGES are also discussed 

CA731202 JB January 19, 1978  2:58 PM


--------------------------------------------------------------
54 Q0 CACM-1138 89  5.941635183878337 BM25


Formalism in Programming Languages*
Formalism in Programming Languages* 

CA640205 JB March 10, 1978  4:24 AM


--------------------------------------------------------------
54 Q0 CACM-2743 90  5.92288006146558 BM25


Sorting X + Y


CA750610 JB January 9, 1978  12:45 PM


--------------------------------------------------------------
54 Q0 CACM-2573 91  5.895244463441022 BM25


Computer Programming as an Art


CA741201 JB January 16, 1978  10:04 AM


--------------------------------------------------------------
54 Q0 CACM-1693 92  5.871404823611466 BM25


GPL, a Truly General Purpose Language
A truly general purpose programming language , GPL , is described which contains facilities for constructing ( within the language ) new data TYPES aswell as facilities for operations performed upon them Constructslike the ALGOL 60 for-statements , and if-statements are not basic ; they are special TYPES of procedures 

CA680908 JB February 22, 1978  8:40 AM


--------------------------------------------------------------
54 Q0 CACM-2341 93  5.826565538272173 BM25


Blocks-A New Data type for SNOBOL4
A variety of graphical problems ( includingflowcharting , bargraphs , logic diagrams , mathematical-equation formation , and text justificationand preparation ) have been programmed on a printer in what appears to be an easy and natural way character manipulation , output formatting , stringprocessing , graphics , nonnumerical programming , SNOBOL4 , data TYPES , two-dimensional mathematics , test processing , flowcharting The concept of a block is largelylanguage independenthat is , blocks require little in the way of specialized syntax and could readilybe absorbed into the external structure of most programming LANGUAGES 

CA720604 JB January 30, 1978  4:38 PM


--------------------------------------------------------------
54 Q0 CACM-0762 94  5.733399677999741 BM25


Some Remarks on the Syntax of Symbolic Programming Languages
Some Remarks on the Syntax of Symbolic Programming LANGUAGES 

CA630836 JB March 13, 1978  8:07 PM


--------------------------------------------------------------
54 Q0 CACM-1749 95  5.723454234527721 BM25


The Structure of the "THE"-Multiprogramming System
DIJKSTRA , E These sequential processes are placedat various hierarchical levels , in each of which one or more independent abstractions have beenimplemented The hierarchical structure proved to be vital for the verification of the logical soundnessof the design and the CORRECTNESS of its implementation 

CA680507 JB February 23, 1978  9:20 AM


--------------------------------------------------------------
54 Q0 CACM-1304 96  5.707775178738746 BM25


A Rapid Turnaround Multi-Programming System


CA650303 JB March 7, 1978  6:19 PM


--------------------------------------------------------------
54 Q0 CACM-0118 97  5.669783923979911 BM25


Character Scanning on the IBM 7070


CA601117 JB March 20, 1978  6:52 PM


--------------------------------------------------------------
54 Q0 CACM-2594 98  5.6418898421840264 BM25


Structured Data Structures
To remedy this situation , this paper proposes a gauge which provides for the creationof a restricted class of data structures but ensures the CORRECTNESS of the program 

CA741004 JB January 16, 1978  12:46 PM


--------------------------------------------------------------
54 Q0 CACM-1198 99  5.60039247744189 BM25


Solution of a Problem in Concurrent Programming Control
DIJKSTRA , E 

CA650908 JB March 6, 1978  7:24 PM


--------------------------------------------------------------
54 Q0 CACM-0170 100  5.583273911073361 BM25


Some Thoughts on Reconciling Various Character Set Proposals


CA600703 JB March 20, 1978  9:18 PM


