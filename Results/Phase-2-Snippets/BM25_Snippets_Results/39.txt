--------------------------------------------------------------
39 Q0 CACM-2651 1  54.58477987721716 BM25


The Treatment of Data Types in EL1
data types , modes , mode unions , type conversion , coercion , generic functions , EXTENSIBLE languages , data type definition , data description language , compilation The resultingtreatment of data types includes provision for programmer-defined data types data types and genericroutines , programmer control over type conversion , and very flexible data type behavior , in a context thatallows efficient compiled code and compact data representation 

CA740502 JB January 17, 1978  4:32 PM


--------------------------------------------------------------
39 Q0 CACM-3105 2  46.35004668795882 BM25


A Language Extension for Expressing Constraints on Data Access
The approach can be used to extend any strongly-typed language , but is particularly suitable for extendinglanguages that support the notion of ABSTRACT data types Programming languages , access control , data types , ABSTRACT data types , type checking , capabilities 

CA780502 DH February 26, 1979  3:19 PM


--------------------------------------------------------------
39 Q0 CACM-2940 3  44.000492051616874 BM25


Abstraction and Verification in Alphard: Definingand Specifying Iteration and Generators
Abstraction and Verification in Alphard : Definingand Specifying Iteration and Generators The Alphard `` form '' provides the programmer witha great deal of control over the implementation of ABSTRACT data types In this paper the abstraction techniquesare extended from simple data representation and function definition to the iteration statement , themost important poin t of interaction between data and the control structure of the language itself Ameans of specializing Alphard 's loops to operate on ABSTRACT entities without explicit dependence on therepresentation of those entities is in troduced abstraction and representation , ABSTRACT data types , assertions , control specialization , correctness , generators , invariants , iteration statements , modulardecomposition , program specifications , programming languages , programming methodology , proofs of correctness , types , verification A means of showing that a generator will terminate is also provided Specification and verification techniques that allowthe properties of the generators for such iterations to be expressed in the form of proof rules are developed 

CA770803 JB December 28, 1977  7:59 AM


--------------------------------------------------------------
39 Q0 CACM-2956 4  42.392115927455 BM25


Some Ideas on Data Types in High-Level Languages
Amongthese are the need for a notation for iterating over the elements of any finite set ( instead of themore narrow for i : = 1 to n notation ) , the use of the domain of an array as a data type , the need fora simple notation for allowing types of parameters to be themselves parameters ( but in a restrictive fashion ) , and resulting problems with conversion of values from one type to another 

CA770607 JB December 28, 1977  1:27 PM


--------------------------------------------------------------
39 Q0 CACM-2958 5  37.75953524851836 BM25


Abstract Data Types and the Development of Data Structures
ABSTRACT Data Types and the Development of Data Structures ABSTRACT data types can play a significant rolein the development of software that is reliable , efficient , and flexible This paper presents and discussesthe application of an algebraic technique for the specification of ABSTRACT data types ABSTRACT data type , correctness proof , data type , data structure , specification , software specification 

CA770605 JB December 29, 1977  1:17 AM


--------------------------------------------------------------
39 Q0 CACM-2470 6  37.28163470510573 BM25


Fen-An Axiomatic Basis for Program Semantics
semantics , formal systems , lambda-calculus , extensiblelanguages , data types , modes , axioms , correctness , formal language definition , formal description , data structures , description languages , models of computation A formal system is presented which abstractsthe notions of data item , function , and relation An appendix is included which presents indetail the formal system governing webs and fen , the abstractions used informally in the body of the paper 

CA730804 JB January 23, 1978  11:01 AM


--------------------------------------------------------------
39 Q0 CACM-1861 7  37.00487228952075 BM25


The MAD Definition Facility
Information is given onhow one writes DEFINITIONS , as well as on much of the motivation behind the form in which DEFINITIONS arewritten MAD , DEFINITIONS , OPERATORS , macros , higher level language Users of the language can define new OPERATORS and/or data typesinto the MAD language , so that their use appears as if they were predefined 

CA690802 JB February 15, 1978  6:07 PM


--------------------------------------------------------------
39 Q0 CACM-3103 8  35.20775053101057 BM25


Automatic Data Structure Selection: An Example and Overview
The use of several levels of abstraction hasproved to be very helpful in constructing and maintaining programs When programs are designed with abstractdata types such as sets and lists , programmer time can be saved by automating the process of fillingin low-level implementation details In the past , programming systems have provided only a single generalpurpose implementation for an ABSTRACT type Thus the programs produced using ABSTRACT types werethen inefficient in space or time In this paper a system for automatically choosing efficient implementationsfor ABSTRACT types from a library of implementations is discussed ABSTRACT data types , automatic programming , datastructures , optimizing compilers , sets , lists 

CA780504 DH February 26, 1979  1:51 PM


--------------------------------------------------------------
39 Q0 CACM-2957 9  35.10499375831251 BM25


Database Abstractions: Aggregation
Database Abstractions : Aggregation Aggregation is in troduced as an abstractionwhich is important in conceptualizing the real world A new data type , called aggregation , is developed which , undercertain criteria of `` well-definedness , '' specifies aggregation abstractions It issuggested that aggregate types , and other types which support real-world abstractions without in troducingimplementation detail , should be incorporated into programming languages data abstraction , relational database , data type , aggregation , database design , data structure , knowledge representation , data definition language 

CA770606 JB December 29, 1977  12:33 AM


--------------------------------------------------------------
39 Q0 CACM-2254 10  34.68269524754168 BM25


Dynamic Partitioning for Array Languages
These DEFINITIONS are motivated with several realistic examples to illustratethe value of partitioning for array languages 

CA721201 JB January 27, 1978  1:20 PM


--------------------------------------------------------------
39 Q0 CACM-1614 11  34.59759037621691 BM25


A Proposal for Definitions in ALGOL
A Proposal for DEFINITIONS in ALGOL DEFINITIONS may occur in any block heading and terminatewith the block An extension to ALGOL is proposed for addingnew data types and OPERATORS to the language Eventhe behavior of existing OPERATORS may be redefined 

CA670401 JB February 28, 1978  11:43 AM


--------------------------------------------------------------
39 Q0 CACM-2941 12  34.23600742533767 BM25


Early Experience with Mesa
The specific topics addressed are : module structure and its use in defining abstractions , data-structuringfacilities in Mesa , an equivalence algorithm for types and type coercions , the benefits of the type systemand why it is breached occasionally , and the difficulty of making the treatment of variant records safe 

CA770802 JB December 28, 1977  8:07 AM


--------------------------------------------------------------
39 Q0 CACM-2939 13  33.79449588060223 BM25


Abstraction Mechanisms in CLU
Abstraction Mechanisms in CLU CLU is a new programming language designed to supportthe use of abstractions in program construction Work in programming methodology has led to the realizationthat three kinds of abstractions-procedural , control , and especially data abstractions-are usefulin the programming process Of these , only the procedural abstraction is supported well by conventionallanguages , through the procedure or subroutine CLU provides , in addition to procedures , novel linguisticmechanisms that support the use of data and control abstractions This paper provides an in troductionto the abstraction mechanisms in CLU By means of programming examples , the utility of the threekinds of abstractions in program construction is illustrated , and it is shown how CLU programs maybe written to use and implement abstractions programming languages , data types , data abstractions , control abstractions , programming methodology , separate compilation 

CA770804 JB December 28, 1977  7:49 AM


--------------------------------------------------------------
39 Q0 CACM-2265 14  33.15302601803893 BM25


A Model for Type Checking
This paper attempts to isolate the notion of type checking and presents a partialsolution to the type checking problem based on the notions of abstraction and application of functions 

CA721104 JB January 27, 1978  2:30 PM


--------------------------------------------------------------
39 Q0 CACM-2705 15  32.57308421703089 BM25


Programming Languages, Natural Languages, and Mathematics
The development of natural languages towardflexion less , word-order based language types speaks for programming language design based on general , ABSTRACT constructs 

CA751202 JB January 6, 1978  8:30 AM


--------------------------------------------------------------
39 Q0 CACM-3031 16  30.68325041387343 BM25


Abstract Data Types and Software Validation
ABSTRACT Data Types and Software Validation A data abstraction can be naturally specifiedusing algebraic axioms First , it is shown howthe use of algebraic axiomatizations can simplify the process of proving the correctness of an implementationof an ABSTRACT data type ABSTRACT data type , correctness proof , data type , data structure , specification This implementationallows for limited testing of programs at design time , before a conventional implementation is accomplished 

CA781208 DH January 18, 1979  2:51 PM   


--------------------------------------------------------------
39 Q0 CACM-2082 17  29.36238422447873 BM25


Syntax-Directed Documentation For PL 360
This idea is ( 1 ) to use the phrase structure of a program to define the structure of a formal documentation for that program ; ( 2 ) to use the syntactic types and identifiers in the resulting structure to trigger the automaticformation of questions to the programmer , whose answers willbecome part of that documentation ; and ( 3 ) to provide automatic storageand retrieval facilities so that other programmers who wantto understand or modify the program can access the resulting documentation , which is cross-indexed in various ways by syntactic typesand objects 

CA700402 JB February 13, 1978  3:28 PM


--------------------------------------------------------------
39 Q0 CACM-1678 18  29.075387204754456 BM25


Automata, Formal Languages, Abstract Switching,and Computability in a Ph. Computer Science Program
Automata , Formal Languages , ABSTRACT Switching , and Computability in a Ph A number of courses are listed in the areadescribe as automata , formal languages , ABSTRACT switching , and computability , that MIGHT be availableto a Ph 

CA681101 JB February 21, 1978  3:16 PM


--------------------------------------------------------------
39 Q0 CACM-0867 19  28.69136847825906 BM25


Least Squares Fitting of Planes to Surfaces Using Dynamic Programming


CA630424 JB March 14, 1978  11:43 AM


--------------------------------------------------------------
39 Q0 CACM-2937 20  28.24553536348168 BM25


An Experimental Evaluation of Data Type Conventions


CA770806JB December 28, 1977  7:32 AM


--------------------------------------------------------------
39 Q0 CACM-2931 21  28.205061342679826 BM25


Logic and Programming Languages
The experience of many independent workers with the method of data types as lattices ( or partialorderings ) under an information content ordering , and with their continuous mappings , has demonstrated theflexibility of this approach in providing DEFINITIONS and proofs , which are clean and without undue dependenceon implementations These levelscan be made mathematically exact if we can find the right abstractions to represent the necessary structures Nevertheless much remains to be done in showing how ABSTRACT conceptualizationscan ( or can not ) be actualized before we can say we have a unified theory The definition of the precise meaning of a programthen requires us to explain what are the objects of computation ( in a way , the statics of the problem ) and how they are to be transformed ( the dynamics ) 

CA770902 JB December 28, 1977  6:49 AM


--------------------------------------------------------------
39 Q0 CACM-2341 22  27.758698344025362 BM25


Blocks-A New Data type for SNOBOL4


CA720604 JB January 30, 1978  4:38 PM


--------------------------------------------------------------
39 Q0 CACM-1835 23  27.71795856920944 BM25


The IITRAN Programming Language


CA691011 JB February 15, 1978  1:54 PM


--------------------------------------------------------------
39 Q0 CACM-1463 24  27.61289547539926 BM25


More on Extensible Machines
More on EXTENSIBLE Machines One of the most salient characteristics of extensiblemachines ( EM ) is the facility for providing system control over program-to-program and program-to-datalinkage ( e 

CA660309 JB March 3, 1978  1:34 PM


--------------------------------------------------------------
39 Q0 CACM-2051 25  27.231595264652817 BM25


A PL/I Program to Assist the Comparative Linguist


CA700604 JB February 13, 1978  11:51 AM


--------------------------------------------------------------
39 Q0 CACM-1098 26  27.151298636549978 BM25


A Comparison of List-Processing Computer Languages(Including a Detailed Comparison of COMIT, IPL-V, LISP 1.5, and SLIP)


CA640410 JB March 10, 1978  1:37 AM


--------------------------------------------------------------
39 Q0 CACM-1379 27  27.096047822806188 BM25


A Final Solution to the Dangling Else of ALGOL 60 and Related Languages
Existing solutions to the problemare either ambiguous or unnecessarily restrictive It is shown that the syntax equations are unambiguous , and that may change in the statementtypes required within the syntax equations would lead to either ambiguity or unnecessary restriction 

CA660908 JB March 2, 1978  6:18 PM


--------------------------------------------------------------
39 Q0 CACM-2603 28  27.046391346521908 BM25


The Equivalence of Reducing TransitionLanguages and Deterministic Languages


CA740905 JB January 17, 1978  8:52 AM


--------------------------------------------------------------
39 Q0 CACM-2558 29  26.670280940713063 BM25


Protection in Programming Languages


CA730103JB January 24, 1978  4:45 PM


--------------------------------------------------------------
39 Q0 CACM-2305 30  25.692286869496243 BM25


The "Plankalkul" of Konrad Zuse: A Forerunnerof Today's Programming Languages


CA720723 JB January 30, 1978  10:46 AM


--------------------------------------------------------------
39 Q0 CACM-2632 31  25.58983434536214 BM25


HYDRA: The Kernel of a Multiprocessor Operating System


CA740614 JB January 17, 1978  2:40 PM


--------------------------------------------------------------
39 Q0 CACM-1491 32  25.53753005984479 BM25


EULER: A Generalization ALGOL, and its Formal Definition: Part I*
A method for defining programming languages isdeveloped which introduces a rigorous relationship between structure and meaning The structure of alanguage is defined by a phrase structure syntax , the meaning in terms of the effects which the executionof a sequence of interpretation rules exerts upon a fixed set of variables , called the Environment 

CA660104 JB March 3, 1978  4:22 PM


--------------------------------------------------------------
39 Q0 CACM-1366 33  25.455297266732238 BM25


Computer Simulation-Discussion of theTechnique and Comparison of Languages 


CA661001 JB March 2, 1978  4:23 PM


--------------------------------------------------------------
39 Q0 CACM-1469 34  25.416218860497853 BM25


The Next 700 Programming Languages 
The other is the choice of the ABSTRACT entities ( such as numbers , character-strings , listsof them , functional relations among them ) that can be referred to in the language 

CA660303 JB March 3, 1978  2:05 PM


--------------------------------------------------------------
39 Q0 CACM-1625 35  25.403776756086934 BM25


On the Automatic Simplification of Source-Language Programs


CA670304 JB February 28, 1978  1:33 PM


--------------------------------------------------------------
39 Q0 CACM-1902 36  25.328868385062314 BM25


An Automatic Grading Scheme for Simple Programming Exercises
Exercisesrun under the scheme may be mixed with other programs , and no special recognition of exercises by the OPERATORS is necessary 

CA690507 JB February 17, 1978  3:35 PM


--------------------------------------------------------------
39 Q0 CACM-2406 37  25.197895502868715 BM25


A Data Definition and Mapping Language


CA731202 JB January 19, 1978  2:58 PM


--------------------------------------------------------------
39 Q0 CACM-3101 38  25.01395867148939 BM25


The SL5 Procedure Mechanism


CA780506 DH February 26, 1979  1:36 PM


--------------------------------------------------------------
39 Q0 CACM-3066 39  24.681107312133978 BM25


A Controlled Experiment in Program Testingand Code Walkthroughs/Inspections


CA780906 DH February 5, 1979  10:47 AM


--------------------------------------------------------------
39 Q0 CACM-2264 40  24.539834044517093 BM25


Derived Semantics for Some Programming Language Constructs
During the course ofconstructing the proof , formal DEFINITIONS of the concepts of value and side-effect are derived in orderto make the proof rigorous Correctness of the implementation involves checking that the DEFINITIONS derivedin the step above are an acceptable formalization of the informal description given in the first step 

CA721105 JB January 27, 1978  2:19 PM


--------------------------------------------------------------
39 Q0 CACM-2317 41  24.43112506017826 BM25


Programming Systems and Languages 1965-1975
There is a great deal of theoretical interest in Algol 68and in EXTENSIBLE languages , but so far at least they have had little practical impact 

CA720711 JB January 30, 1978  1:47 PM


--------------------------------------------------------------
39 Q0 CACM-2002 42  24.412723127136488 BM25


AMESPLOT-A Higher Level Data Plotting Software System
AMESPLOT is an EXTENSIBLE software system designed to make the display of data as simple , painless , and neat as possible 

CA700903 JB February 10, 1978 2:08 PM


--------------------------------------------------------------
39 Q0 CACM-1474 43  24.214557728316922 BM25


Tests of Probabilistic Models for Propagation of Roundoff Errors


CA660210 JB March 3, 1978  2:37 PM


--------------------------------------------------------------
39 Q0 CACM-2684 44  24.15994666994594 BM25


Production Systems: or Can We Do Better than BNF?
Yet numerous interesting and difficult issues in syntax stem from the context-sensitive requirements , notably the COMPATIBILITY between the declaration of an identifier and its uses , the correspondencebetween actual and formal parameters , and issues arising from block structure Amore detailed presentation , as well as the application to define ABSTRACT syntax and translations between languages , is given in a previous paper by the author 

CA740205 JB January 18, 1978  1:07 PM


--------------------------------------------------------------
39 Q0 CACM-2546 45  24.136624808923898 BM25


The Use of Grammatical Inference for Designing Programming Languages
The implementation is presently restricted to a subclass of operator precedence grammars , buta second algorithm is outlined which applies to a larger class of context-free grammars grammar design , language definition , inference , identification in the limit , EXTENSIBLE languages 

CA730202 JB January 24, 1978  3:20 PM


--------------------------------------------------------------
39 Q0 CACM-3071 46  23.690759066246393 BM25


An Algorithm Using Symbolic Techniques for theBel-Petrov Classification of Gravitational Fields


CA780901 DH February 5, 1979  3:43 PM


--------------------------------------------------------------
39 Q0 CACM-1911 47  23.61429968579485 BM25


On Coordination Reduction and Sentence Analysis
Precise specificationof both the generative procedure of this paper and its inverse is given in the form of LISP function DEFINITIONS 

CA690406 JB February 17, 1978  4:25 PM


--------------------------------------------------------------
39 Q0 CACM-2645 48  23.598528464164712 BM25


Two Languages for Estimating Program Efficiency


CA740601 JB January 17, 1978  3:48 PM


--------------------------------------------------------------
39 Q0 CACM-1237 49  23.31363119123465 BM25


Conversion of Decision Tables To Computer Programs
It is presumed that the readeris familiar with the nature of decision tables and conventional DEFINITIONS 

CA650618 JB March 6, 1978  9:45 PM


--------------------------------------------------------------
39 Q0 CACM-1693 50  23.273990064813695 BM25


GPL, a Truly General Purpose Language


CA680908 JB February 22, 1978  8:40 AM


--------------------------------------------------------------
39 Q0 CACM-2886 51  23.258828044063474 BM25


Semantic Evaluation from Left to Right


CA760201 JB January 5, 1978  9:54 AM


--------------------------------------------------------------
39 Q0 CACM-1112 52  23.148772697285715 BM25


A Technique for Computer Detection and Correction of Spelling Errors*


CA640320 JB March 10, 1978  2:21 AM


--------------------------------------------------------------
39 Q0 CACM-2252 53  23.12025025066782 BM25


A Method for Incrementally CompilingLanguages with Nested Statement Structure
The essential pointsof the method are : ( 1 ) the syntax of the language is restricted insof ar as which constructs may occuron lines ; ( 2 ) an internal data structure ( called the skeleton ) is maintained to represent the statementstructure ; ( 3 ) the recompilation is partially batched in the sense that recompilation of modified linesdoes not occur until the last of a set of editing commands has been received ; and ( 4 ) the parsing andcompilation are factored into two parts , that done on individual lines and that done globally tohandle the relationships between the lines 

CA721203 JB January 27, 1978  1:04 PM


--------------------------------------------------------------
39 Q0 CACM-2078 54  23.08191721247624 BM25


Representations for Space Planning
Four alternative data structuresthat ALLOW automated space planning are described and compared 

CA700406 JB February 13, 1978  3:03 PM


--------------------------------------------------------------
39 Q0 CACM-3198 55  22.99168796746929 BM25


   Microprogramming, Emulators and Programming Languages


CA660318 ES March 17, 1982 10:10 AM


--------------------------------------------------------------
39 Q0 CACM-2198 56  22.85428895403922 BM25


Introduction to "Feature Analysis ofGeneralized Data Base Management Systems"


CA710501 JB February 3, 1978  3:18 PM


--------------------------------------------------------------
39 Q0 CACM-2178 57  22.818419738016793 BM25


A Language Extension for Graph Processing and Its Formal Semantics
Commonly , the definition of a language involves definition of the syntactic elements and explanationof the meaning to be assigned them ( the semantics ) 

CA710704 JB February 3, 1978  9:24 AM


--------------------------------------------------------------
39 Q0 CACM-2887 58  22.804977471533455 BM25


A Study of Errors, Error-Proneness, and Error Diagnosis in Cobol


CA760106 JB January 5, 1978  10:06 AM


--------------------------------------------------------------
39 Q0 CACM-1467 59  22.76387451215839 BM25


A Graphical ServiceSystem With Variable Syntax


CA660305 JB March 3, 1978  1:49 PM


--------------------------------------------------------------
39 Q0 CACM-0464 60  22.754100334547758 BM25


Syntactic Analysis by Digital Computer


CA621016 JB March 17, 1978  7:11 PM


--------------------------------------------------------------
39 Q0 CACM-1457 61  22.712601066579357 BM25


Data Manipulation and Programming Problemsin Automatic Information Retrieval


CA660315 JB March 3, 1978  11:35 AM


--------------------------------------------------------------
39 Q0 CACM-2126 62  22.60308919588557 BM25


Experience with an Extensible Language
Experience with an EXTENSIBLE Language An operational EXTENSIBLE language system is described programming languages , EXTENSIBLE , compiler , bootstrapping , ambiguity 

CA700105 JB February 14, 1978  2:02 PM


--------------------------------------------------------------
39 Q0 CACM-1180 63  22.58595651570889 BM25


AXLE: An Axiomatic Language for String Transformations
Imperatives are appliedin accordance with DEFINITIONS of symbolic terms , presented systematically in an assertion table 

CA651101 JB March 6, 1978  6:22 PM


--------------------------------------------------------------
39 Q0 CACM-1470 64  22.58008993406647 BM25


The Structure of Programming Languages
The following are identified as major componentsof every programming language : ( 1 ) the elementary program statement , ( 2 ) mechanisms for linking elementarystatements together , ( 3 ) the means by which a program can obtain data inputs The three principal ways of getting inputs for routines are ( 1 ) by referring tothe data itself , ( 2 ) by referring to the data by a `` name '' , and ( 3 ) by referring to it implicitly by meansof variables or functions 

CA660302 JB March 3, 1978  2:20 PM


--------------------------------------------------------------
39 Q0 CACM-2652 65  22.512442957037006 BM25


Reduction of Compilation Costs Through Language Contraction
Programming languages tailored to particulargroups of users can often be constructed by removingunwanted features from a general purpose language 

CA740501 JB January 17, 1978  4:39 PM


--------------------------------------------------------------
39 Q0 CACM-2299 66  22.385468082261603 BM25


An Extensible Editor for a Small Machine with Disk Storage
An EXTENSIBLE Editor for a Small Machine with Disk Storage 

CA720803 JB January 30, 1978  10:00 AM


--------------------------------------------------------------
39 Q0 CACM-0655 67  22.327763550137234 BM25


COMIT as an IR Language


CA620104 JB March 20, 1978  4:46 PM


--------------------------------------------------------------
39 Q0 CACM-3142 68  22.320697126008533 BM25


Consumer Difficulties With Computerized Transactions: An Empirical Investigation


CA790503 DH June 5, 1979  3:21 PM


--------------------------------------------------------------
39 Q0 CACM-1282 69  22.29566050720023 BM25


The Use of FORTRAN in Subroutines with COBOL Main Programs


CA650409 JB March 7, 1978  3:52 PM


--------------------------------------------------------------
39 Q0 CACM-2138 70  22.266340434997524 BM25


BLISS: A Language for Systems Programming
Prime design goals of the design are theability to produce highly efficient object code , to ALLOW access to all relevant hardware features ofthe host machine , and to provide a rational means by which to cope with the evolutionary nature of systemsprograms 

CA711205 JB February 2, 1978  10:09 AM


--------------------------------------------------------------
39 Q0 CACM-3150 71  22.119914362397264 BM25


Beyond Programming Languages
Justas high level languages enabled the programmer to escape from theintricacies of a machine 's order code , higher level programming systemscan provide the means to understand and manipulate complexsystems and components 

CA790701 DH August 22, 1979  2:00 PM


--------------------------------------------------------------
39 Q0 CACM-1459 72  22.062571487482327 BM25


Requirements for Real-Time Languages


CA660313 JB March 3, 1978  11:48 AM


--------------------------------------------------------------
39 Q0 CACM-3030 73  22.052463318614166 BM25


An Example of Hierarchical Design and Proof
Program verification , specification , data abstraction , software modules , hierarchical structures 

CA781209 DH January 16, 19794:43 PM  


--------------------------------------------------------------
39 Q0 CACM-2699 74  21.88004672788839 BM25


Automatic Data Structure Choice in a Language of Very High Level
Among other methods of interest , the optimizer uses techniques which ALLOW relations of inclusionand membership to be established , the domains and ranges of ( tabulated ) mappings to be estimated fromabove and below , and the single-valuedness of ( tabulated ) mappings to be proved 

CA751208 JB January 5, 1978  3:53 PM


--------------------------------------------------------------
39 Q0 CACM-2081 75  21.819613716635605 BM25


Some Complete Calculi for Matrices
Sequences of Matrices ( and sequences of sequencesof matrices ) are considered , and matrix OPERATORS areextended to sequence OPERATORS and cumulative OPERATORS 

CA700403 JB February 13, 1978  3:18 PM


--------------------------------------------------------------
39 Q0 CACM-3006 76  21.740704835791355 BM25


Anomalies with Variable Partition Paging Algorithms
One type of anomaly , for example , concernsthe fact that , with certain reference strings and paging algorithms , an increase in MEAN memory allocationmay result in an increase in fault rate 

CA780307 JB March 28,1978  1:01 PM


--------------------------------------------------------------
39 Q0 CACM-2717 77  21.475161945536655 BM25


CONVERT: A High Level TranslationDefinition Language for Data Conversion


CA751002 JB January 6, 1978  1:45 PM


--------------------------------------------------------------
39 Q0 CACM-1485 78  21.41848568126758 BM25


The Structure of Programming Languages
In this paper the major components of everyprogramming language are identified as : ( 1 ) the elementary program statement , ( 2 ) mechanisms for linkingelementary statements together , ( 3 ) the means by which a program can obtain data inputs 

CA660202 JB March 3, 1978  3:46 PM


--------------------------------------------------------------
39 Q0 CACM-0205 79  21.356143360613384 BM25


Macro Instruction Extensions of Compiler Languages
In particular , conditional assembly , nesteddefinitions , and parenthetical notation serve to make a compiler capable of accepting verygeneral extensions to its ground language 

CA600406 JB March 22, 1978  1:49 PM


--------------------------------------------------------------
39 Q0 CACM-2320 80  21.3299261742463 BM25


Structured Multiprogramming
This clarifies the meaningof programs and permits a large class of time-dependent errors to be caught at compile time 

CA720708 JB January 30, 1978  2:39 PM


--------------------------------------------------------------
39 Q0 CACM-1588 81  21.28194730592002 BM25


PL/I List Processing


CA670604 JB February 28, 1978  9:30 AM


--------------------------------------------------------------
39 Q0 CACM-1703 82  21.17570099120288 BM25


Accommodating Standards and Identification of Programming Languages
The user public wants standardization andreliable identification of programming languages and related services Oppressive rigidity usually associated with standardization is avoided by a new accommodation techniqueaccessible to the user to ALLOW local variations with the language 

CA680811 JB February 22, 1978  9:50 AM


--------------------------------------------------------------
39 Q0 CACM-3185 83  21.165677351603545 BM25


   The Humble Programmer


CA721010 ES March 18, 1982 10:00 AM


--------------------------------------------------------------
39 Q0 CACM-1852 84  21.152385402289458 BM25


A Base for a Mobile Programming System


CA690903 JB February 15, 1978  4:54 PM


--------------------------------------------------------------
39 Q0 CACM-1626 85  21.131105897873564 BM25


Structure of a LISP System Using Two-Level Storage
A scheme for binding variablesis described which is good in this environment and allows for complete COMPATIBILITY between compiledand interpreted programs with no special declarations The techniques includecareful segmentation of system programs , allocation of virtual memory to ALLOW address arithmetic for typedetermination , and a special algorithm for building reasonably linearized lists 

CA670303 JB February 28, 1978  1:39 PM


--------------------------------------------------------------
39 Q0 CACM-3002 86  21.09117858102345 BM25


A Record and File Partitioning Model


CA770103 JB January 3, 1978  12:28 AM


--------------------------------------------------------------
39 Q0 CACM-1200 87  21.09036427139557 BM25


On Reversible Subroutines and Computers that Run Backwards


CA650906 JB March 6, 19787:33 PM


--------------------------------------------------------------
39 Q0 CACM-1482 88  21.038486767747727 BM25


BUGSYS: A Programming System for Picture Processing-Not for Debugging


CA660205 JB March 3, 1978  3:16 PM


--------------------------------------------------------------
39 Q0 CACM-0949 89  20.906878958620428 BM25


Integer and Signed Constants in ALGOL
The aim is to point out that , if it is true that the grammarof a context-free language should be conceived not only as a strings-generating device but also as amethod for expressing a meaning , then the grammar of ALGOL is open to some criticism 

CA641222 JB March 9, 1978  2:35 PM


--------------------------------------------------------------
39 Q0 CACM-2527 90  20.868762733845905 BM25


Implementation of High Level Language Machine


CA730401 JB January 24, 1978  10:21 AM


--------------------------------------------------------------
39 Q0 CACM-1543 91  20.80342202128658 BM25


Computer Formulation of the Equations of Motion Using Tensor Notation
A means is described for extending the areaof application of digital computers beyond the numerical data processing stage and reducing the need forhuman participation in the formulation of certain types of computer problems 

CA670903 JB February 27, 1978  3:58 PM


--------------------------------------------------------------
39 Q0 CACM-2722 92  20.80333613101486 BM25


Multidimensional Binary Search Trees Used for Associative Searching


CA750902 JB January 6, 1978  3:22 PM


--------------------------------------------------------------
39 Q0 CACM-1265 93  20.797080423609852 BM25


On the Relative Efficiencies of Context-Free Grammar Recognizers
A number of diverse recognition proceduresthat have been proposed for parsing sentences with respect to a context-free grammar are described in thispaper by means of a common device Empiricalcomparison of the recognition of more realistic programming languages such as LISP and ALGOL has beenmade by means of a program which simulates the Turing Machine on the Univac M-460 computer 

CA650506 JB March 7, 1978  2:38 PM


--------------------------------------------------------------
39 Q0 CACM-0321 94  20.766287056524078 BM25


ALGOL 60 Confidential
Indeed , a lot of the unnecessary restrictionsimposed by other compiling languages have finally been lifted So many restrictions have been lifted that a lot of technical details crop up which are hard to learnand to use correctly But ALGOL also allows many unobvious thingsto be written , as we will see later , and herein lies a problem : ALGOL seems to have become too general 

CA610604 JB March 16, 1978  10:48 PM


--------------------------------------------------------------
39 Q0 CACM-0618 95  20.5597488063942 BM25


Computers- The Key to Total Systems Control: An Industrial Viewpoint


CA620314 JB March 20, 1978  2:53 PM


--------------------------------------------------------------
39 Q0 CACM-2289 96  20.531899087680387 BM25


Cellular Arrays for the Solution of Graph Problems


CA720901 JB January 30, 1978  9:16 AM


--------------------------------------------------------------
39 Q0 CACM-2810 97  20.520769507091433 BM25


Professionalism in the Computing Field
The term professional means different thingsto different people ; nevertheless , there are certain general technical and social standards normally associatedwith a professional 

CA750101 JB January 12, 1978  11:05 AM


--------------------------------------------------------------
39 Q0 CACM-1143 98  20.511344044289714 BM25


Analysis of Decay-Type Data*


CA640112 JB March 10, 1978 5:11 AM


--------------------------------------------------------------
39 Q0 CACM-2152 99  20.492025400654885 BM25


Display Procedures
Although the use of structured display filesis widespread in interactive computer graphics , these structures present a number of problems whichtend to RESTRICT their generality and usefulness 

CA711004 JB February 2, 1978  1:11 PM


--------------------------------------------------------------
39 Q0 CACM-3148 100  20.479602681280976 BM25


High Level Programming for Distributed Computing


CA790604 DH August 21, 1979  4:31 PM


